STEP 1:
	--Categories Entity
	  ->using System.ComponentModel.DataAnnotations;


STEP 2:
	--Products Entity
	  ->using System.ComponentModel.DataAnnotations;

	--LINK OF STEPS 1 & 2:
		https://www.mediafire.com/folder/3lkyobyl3k0v0/Step+1


STEP 3:
	--Install Packages:
		--Microsoft.EntityFrameworkCore
		--Microsoft.EntityFrameworkCore.SqlServer
		--Microsoft.EntityFrameworkCore.Tools
		--Microsoft.EntityFrameworkCore.Design

	--DbContext Class
	  ->using Microsoft.EntityFrameworkCore;

	--LINK: https://www.mediafire.com/folder/siym32rjljfnp/Step+3


STEP 4:
	--Connection String in appsettings.json:

		--For Sql Server Authentication:
			--"ConnectionStrings": { "con": "Data Source=.;user id=sa;password=a123456; Initial Catalog=DbMorPro; Encrypt=False" },
		--For Windows Authentication:
			--"ConnectionStrings": { "con": "Data Source=DESKTOP-R6JGHLF\\MSSQLSERVER01;Integrated Security=true; Initial Catalog=DbMorPro; Encrypt=False"},


	--Declaration Of Connection String in Program.cs:
 	  ->using ProjectName.Models;
	  ->using Microsoft.EntityFrameworkCore;


	--Run Commands:
		--add-migration Initial
		--update-database


STEP 5:
	--Make Admin Layout In Shared Folder
	--Slice Admin Template
	--Paste before </body> :
	  -> @await RenderSectionAsync("Scripts", required: false)
	--Make Category Controller
	

	--LINKS FOR STEPS 4 & 5:
		https://www.mediafire.com/file/iu951vdjv6t4bvx/Step_4.zip/file
		https://www.mediafire.com/file/7zf12gc9bp1kgyr/Step_5.zip/file		


STEP 6:
	--Make Products Controller
	--LINK: https://www.mediafire.com/file/fhxo8i0e2f5ynmw/Template_Set.zip/file



STEP 7:
	--Slice Website's Home Page
	--LINK: https://www.mediafire.com/file/mip7yybi51vk21s/video1703859433.mp4/file



STEP 8:
	--Product's Image Upload.

		1.Changes In Create File Of Products.
			-method set to post and enctype to multipart/formdata
			-set input type to file and name to img
		2.Changes in ProductController
			-declaration of IWebHostEnvironment in Constructor
			-changes in create(post) function

	--LINK: https://www.mediafire.com/file/x92rqyy2x4g8a8k/Step_8.zip/file



STEP 9:
	--Registeration Work
		--Entity
		--Controller
		--View

	--LINK:	https://www.mediafire.com/file/ik251c8mt89fyv3/STEP_9.zip/file		


STEP 10:
	--Login Work
		--Function:
			[HttpPost]
        		public ActionResult UserLogin(Login lg)
        		{
            			var x =from a in db.UserLogins where a.Email.Equals(lg.Email) && a.Password.Equals(lg.Password) select a;
            			if (x.Any())
            			{
                			return RedirectToAction("Index","Home");
            			}
            			else
            			{
            				ViewBag.m = "Wrong Credentials";
            			}
            			return View();
        			}

	--LINK:	https://www.mediafire.com/file/vn00vhdr5ittun4/STEP_10.zip/file





STEP 11:
	--Add slug
		add slug in product's entity(model) if not added already.
		slug should be exactly the same as in category.
		some changes in create,dit,delete, and index views.
		remove Bling[] from edit function.
		when we edit an entity, we use these commands to update database:
			--add-migration addslug
			--update-database

	--LINK: https://www.mediafire.com/file/9waeprsihm7otq7/STEP_11.zip/file




STEP 12:
	--Show Products on Home Page.
		declare ECDbContext in Constructor
		alter function of Index
		copy first line from Product's Index and Paste in Home Page
		use foreach loop in Home's Index Page (copy it from Product's Index)
		use @item.PImage to print data from database

	--LINK: https://www.mediafire.com/file/wbjqsvg047qcw3j/Step_12.zip/file


STEP 13:
	--Product's Details
		just copy paste funtion and all from product'index function	
	--LINK: https://www.mediafire.com/file/0tfxjn7or7ro6ja/video1183880037.mp4/file


STEP 14:
	--Using Slug And Partial View
		--copy & paste index funtion of Home Controller and paste it with the changed name...i used Products as a name to that function...
		--then create a view for that function...+++ use websites layout page...
		--now we're gonna apply product's page template...(i used cozastore-master...)

		--the shortcut keys i'm using for searching is Ctrl+F...and then Ctrl+c and ctrl+v for copy and paste respectively...


		--now, for filter part...we're gonna use partial view as per our teacher's instructions...
		--Lezz..go..


		--now we'll create a partial view in shared folder...
		--remember that...the underscore in shared files name is not must...but we shoul add it to represent professionalism....
		--I copied and pasted the filter div part which i wanted to get from partial view...
		--@Html.Partial("_FilterView") --> use this code to get your partial view
		--our next step will be to display categories in partial view
		--now...here is what we're gonna do...we will create another model where we will combine both Models...and then willl pass this model and hopefully will get the desired result.... 
		--Lezzz..Goo
		--Now...as we have used IEnumerable in our Combined Model's Class...we dont need it in here...
		--The task is almost done here...now we just need to show products properly...with image and all...
		--We'll fix this later...


	--LINK : https://www.mediafire.com/file/p7ry2u1hg7topsl/Step_14.zip/file





STEP 15:
	--Component View + Filteration
		--Create Class in Models. Class Name should be 'controllername+ViewComponent'
			--using Microsoft.AspNetCore.Mvc;
			--using Microsoft.EntityFrameworkCore;
		--Inherit :ViewComponent in this class then call your DbContext
		--function:
			public async Task<IViewComponentResult> InvokeAsync()
        		{
            			return View(await _context.Categories.ToListAsync());
        		}
		
		--Now Create a Default View. the location must be 'Shared/Components/Contr.Name/Default.cshtml'
			--@using projectName.Models
			--call @model IEnumerable<modelName>

		--display this component view wherever you want by using:
			--@await Component.InvokeAsync("Categories")


	--LINK : https://www.mediafire.com/file/5yaiqaytc11hmk0/Step_15.zip/file




STEP 16:
	--Filter By Slug and Filter By Price
		--use foreach loop :
			@foreach(var item in Model)
			{
				<li class="p-b-6">
					<a asp-area="" asp-controller="Home" asp-route-CategorySlug="@item.slug" asp-action="Index" class="filter-link stext-106 trans-04">
					@item.CName
					</a>
				</li>
			}
		--for Price's Filteration :
				<a asp-area="" asp-controller="Home" asp-route-ProductPrice="500" asp-action="Index" class="filter-link stext-106 trans-04">
					$0.00 - $500.00
				</a>



		--make function :
			public async Task<IActionResult> Index(string categorySlug = "", string productPrice == "")
        		{
				ViewBag.CategorySLug = categorySlug;
				ViewBag.ProductPrice = productPrice;
				if (categorySlug == "" && productPrice == "")
				{
					return View(await _context.Products.OrderByDescending(p => p.ProductId).ToListAsync());
				}
				else if(categorySlug != "" && productPrice == "")
				{
					Category category = await _context.Categories.Where(c => c.slug == categorySlug).FirstOrDefaultAsync();
					if (category == null) return RedirectToAction("Index");
					var ProductsByCategory = _context.Products.Where(p => p.CategoryId == category.CategoryId);
					return View(await ProductsByCategory.OrderByDescending(p => p.ProductId).ToListAsync());
				}
				else if(categorySlug == "" && productPrice != "")
				{
					var ProductsByPrice = _context.Products.Where(p => p.Price > (Int64.Parse(productPrice)-500) && p.Price <= Int64.Parse(productPrice));
					return View(await ProductsByPrice.OrderByDescending(p => p.ProductId).ToListAsync());
				}
				else
				{
					return View(await _context.Products.OrderByDescending(p => p.ProductId).ToListAsync());
				}
        		}
	



	--LINK (Sir) : https://www.mediafire.com/file/9yj37se0sqcjnru/Step_16.zip/file
	--LINK (Mine): https://www.mediafire.com/file/clhabbgueqjofl4/STEP_16.zip/file















STEP 17 :
	--Cart & Session with JSON
		--CartItem Model Class
		--Cart Controller
		--Editing in Program.cs
			--builder.Services.AddSession(options =>
			{
			    options.IdleTimeout = TimeSpan.FromMinutes(30);
			    options.Cookie.IsEssential = true;
			});
			--app.UseSession();
		--SessionExtensions Model Class
		--CartViewModel Model Class
		--SmallCartViewModel Model Class
		--SmallCartViewComponent Model Class
		--SmallCart/Default (Component View)